만들어야 하는 기능>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. 지점별 페이지 구현 (macStatus 및 branchinfo)
1) 지점별 현황(macStatus) 페이지 구현
ex) macStatusA(A지점), macStatusB(B지점),...
- 쿼리스트링 ? 특정이름 붙이기 	ex) ?mname=변수명 -> map.ejs
- 변수를 a,b,c 설정 -> server.js의 get요청에서 /부분에 변수사용

2) 지점별 현황에 대한 기기상세(branchinfo) 페이지 구현
ex) branchinfoA1(A지점 wmac1), branchinfoA2(A지점 wmac2),...
     branchinfoB1(B지점 wmac1), branchinfoB2(B지점 wmac2),...
----------------------------------------------------------------------------------
2. 웨이팅 사용 조건 세부화 코드 추가
- 모든 기기가 사용중인지 아닌지 구분하는 코드
- 'branchinfo에서 비밀번호 입력 후 일치' > 시작버튼 클릭하는 코드
- '모든 기기가 사용중인 경우' 웨이팅 사용(mypage에 있음)하는 코드
  > macstatus와 branchinfo의 타이머 실행
  > 웨이팅 사용 코드 실행(총웨이팅인원-1, isUseWait true로 변경) 
----------------------------------------------------------------------------------
3. 부여된 웨이팅 순서대로 사용 가능한 코드 추가
- 웨이팅 순서가 아닌 경우 웨이팅 사용 불가
- 웨이팅 순서가 맞는 경우 웨이팅 사용 가능
ex1) 웨이팅 순서가 맞는 경우만 웨이팅 사용 버튼 활성화
ex2) 웨이팅 순서가 아닌 경우 /bwaituse(웨이팅 사용 전)로 이동
> 자신의 차례 : branchinfo로 이동 / 자신의 차례X : bwaituse로 이동 추가
----------------------------------------------------------------------------------
4. mypage에 넣을 내용 구상
----------------------------------------------------------------------------------
5. 웹소켓(아두이노 대체)
- 사용여부, 잔여시간 출력
----------------------------------------------------------------------------------
6. 웨이팅 알람 기능 및 잔여시간 알람 기능
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


10/25(화)>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. info 브랜치 생성
2. branchinfo 페이지 생성 =====================================================> 디자인 수정
3. index.ejs에서 현황 확인 > 지점 찾기로 수정

4. macstatus에서 branchinfo로 redirect 연결
1) macstatus에서 웨이팅 신청여부에 따라 웨이팅 신청버튼과 세탁기 img 활성화 여부 => 실패
  > 신청X, 웨이팅 하러가기 버튼 활성화 + 세탁기 이미지 버튼 비활성화
  > 신청O, 웨이팅 하러가기 버튼 비활성화 + 세탁기 이미지 버튼 활성화
- 세탁기 img와 div에 disabled 사용 불가

2) macstatus에서 '세탁기 img 클릭 시' /branchinfo로 이동========================> 실패
- 세탁기 img와 그를 감싸는 div를 이용해 클릭 시 redirect는 가능함(but 조건에 따라 이동해야 함)
   (onclick="javascript:location.href='/branchinfo';" 사용함)
- img와 div의 class로 querySelector를 통해 href 사용했지만 정상적으로 실행되지 않음

3) macstatus에서 '세탁기 img 하단에 버튼 추가하여 해당 버튼 클릭 시 branchinfo로 post 요청' => 성공
- 현재 웨이팅 신청X이면 awaituse로 이동, 현재 웨이팅 신청O이면 branchinfo로 이동
  +) 신청O일 때 순서를 구분 > 자신의 차례 : branchinfo로 이동 / 자신의 차례X : bwaituse로 이동
     =====> 코드 수정

4-1)-------------------------------------------------------------------------------------------
- session: "false" 일 때 로그인O (웨이팅 신청은 로그인 한 경우만 가능)
- waitinfo에서 웨이팅 신청 여부를 가져와서 render 시 session과 같이 전송
- 받아온 웨이팅 신청 여부를 ejs에서 사용
  > 웨이팅 신청 여부 false이면, 웨이팅 신청X, 세탁기 이미지 버튼 활성화
  > 웨이팅 신청 여부 true이면, 웨이팅 신청O, 세탁기 이미지 버튼 비활성화
++) wmac도 받아와서 render 후, 해당 번호에 맞는 세탁기 img 비활성화하기
------------------------------------------------------------------------------------------------

5. branchinfo 타이머
- setInterval : 일정 시간 (millisecond) 마다 반복하여 함수 실행
- clearInterval : 일정 시간 마다 반복되는 setInterval 실행 종료
- setTimeout : 만료된 후 함수나 지정한 코드 조각을 실행하는 타이머 설정

https://twinklehwa.tistory.com/426 - 3분 카운트다운 ==> 참고
https://wonpaper.tistory.com/319 - 1초마다 자동갱신되는 타이머
https://goodmemory.tistory.com/116 - 10초 카운트 다운 + stop

---> ajax가 제대로 실행되고 있는지 모르겠음
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


10/26(수)>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. branchinfo 타이머 코드 수정
2. branchinfo Post요청에 대한 Ajax 수정중..
- ajax 없이 실행은 되지만 브라우저 창에 새로고침 계속 돌아가고 redirect 결과 반환이 늦음
- 타이머 새로고침 시 초기화됨
-> /idcheck처럼 /timer 따로 만들고 ajax를 통해서 db로 저장?

https://blog.naver.com/PostView.nhn?blogId=ka28&logNo=222038499551 - Ajax get/post
https://sir.kr/qa/116308 - 타이머 새로고침 초기화 해결방안
- 불특정 접속자마다 다른 실시간 초기화를 원하는 경우 : 쿠키나 세션 사용
- 옥션타이머와 같이 동일한 카운터를 원하는 경우 : ajax를 통해 db로 저장
https://webisfree.com/2015-10-14/ajax%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-%EC%84%9C%EB%B2%84%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%80%EC%9E%A5%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95
- Ajax를 사용해 서버에 데이터 저장하는 방법

3. 웹소켓 공부..
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

10/27(목)>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. 웹소켓 공부..
2. socket.io 라이브러리 설치 -> npm install socket.io

- 아래 코드는 페이지 로드 시 한번 쭉 실행됨 -> ejs
<script>
      var socket = io();  //유저가 웹소켓에 접속
</script>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

10/31(월)>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. branchinfo에서 버튼 클릭 > macstatus에서 타이머 실행
- branchinfo 버튼 클릭 시 server.js로 버튼 클릭 여부 전달 -> 웹소켓 사용? (서버에세 웹소켓으로 실시간 메세지 보냄)
  > server.js에서 버튼 클릭 여부에 따라 ture(클릭O)이면..
    > branchinfo에 있는 유저는 웨이팅 사용했으니 /socket으로 이동
    > server.js에서는 타이머 실행... 그 값을 macstatus.ejs로 render --> ajax 사용?

- 타이머 코드 : branchinfo에서 server.js로 이동
- 타이머 코드 실행한 Timer1을 macStatus get할 때 render{타이머}해서 출력 --> 추후 ajax 사용으로 새로고침

2. 웹소켓
1) socket.io 라이브러리 설치
2) server.js에서
- socket.io에 대한 const 부분 추가
- 서버 띄우는 코드에서 app.listen -> http.listen으로 수정
- index.ejs 대신 socket.ejs 사용
- 웹소켓 접속 시 서버가 실행하는 부분 추가
  io.on('connection', function(){
    console.log('웹소켓 연결로 유저 접속됨');
  });
3) socket.ejs
- index.ejs 복붙
4) macstatus.ejs
- 유저에 웹소켓 접속하는 부분 추가
  <script>
    var socket = io();  
  </script>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>